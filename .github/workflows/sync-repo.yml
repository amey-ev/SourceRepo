name: Sync Lambda to Terraform

on:
  push:
    branches:
      - main  # Runs only when changes are pushed to `main`

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Lambda Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history to compare with main

      - name: Get Changed Folders & Author Info
        id: changed_folders
        run: |
          echo "üîç Detecting all changed folders in this push..."

          # Get the latest commit hash of the main branch
          git fetch origin main

          # Get the list of changed files between HEAD (latest commit) and the latest commit on main
          CHANGED_FILES=$(git diff --name-only origin/main HEAD)
          echo "üìù Changed files: $CHANGED_FILES"

          # Use git diff to get changes in specific directories
          CHANGED_FOLDERS=$(echo "$CHANGED_FILES" | grep -E '^(codebase|devtools|testbench|quickstart)/' | awk -F'/' '{print $1}' | sort -u)

          if [ -z "$CHANGED_FOLDERS" ]; then
            echo "‚ö†Ô∏è No changed folders detected. Skipping..."
            exit 1
          fi

          FILTERED_FOLDERS=""
          for folder in $CHANGED_FOLDERS; do
            if [[ -d "$folder" ]]; then
              FILTERED_FOLDERS+="$folder "
            fi
          done

          if [ -z "$FILTERED_FOLDERS" ]; then
            echo "‚ö†Ô∏è No valid folders detected. Exiting..."
            exit 1
          fi

          AUTHOR_NAME=$(git log -1 --pretty=format:'%an' | tr ' ' '-')
          DATE_FORMATTED=$(date +"%d-%b-%Y" | sed -E 's/^0//')

          BRANCH_NAME="update-$(echo "$FILTERED_FOLDERS" | tr ' ' '-')-${AUTHOR_NAME}-${DATE_FORMATTED}"

          echo "folders=$FILTERED_FOLDERS" >> $GITHUB_ENV
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Zip Only Changed Folders
        run: |
          mkdir -p zipped_files
          for folder in ${{ env.folders }}; do
            if [ -d "$folder" ]; then
              echo "üì¶ Zipping $folder..."
              zip -r "zipped_files/${folder}.zip" "$folder"
            fi
          done

      - name: Clone Terraform Repo
        run: |
          git clone https://github.com/amey-ev/DestinationRepo.git destination-repo
          cd destination-repo
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
        env:
          GIT_TOKEN: ${{ secrets.SYNC }}

      - name: Create and Push Branch to Terraform Repo
        run: |
          cd destination-repo
          git checkout -b "${{ env.branch_name }}"

          CHANGES_DETECTED=false
          for folder in ${{ env.folders }}; do
            if [ -f "../zipped_files/${folder}.zip" ]; then
              echo "üìÇ Moving ${folder}.zip to Terraform repo..."
              mv -f "../zipped_files/${folder}.zip" "lambdas/${folder}.zip"
              git add "lambdas/${folder}.zip"
              CHANGES_DETECTED=true
            fi
          done

          if [ "$CHANGES_DETECTED" = false ]; then
            echo "‚ö†Ô∏è No changes detected. Skipping commit."
            exit 1
          fi

          git commit -m "Updated Lambda zip(s) for ${{ env.folders }} by ${{ env.author }} on ${{ env.date }}"
          git push https://x-access-token:${{ secrets.SYNC }}@github.com/amey-ev/DestinationRepo.git "${{ env.branch_name }}"
        env:
          GIT_TOKEN: ${{ secrets.SYNC }}

      - name: Create Pull Request
        run: |
          if [[ -z "${{ env.folders }}" ]]; then
            echo "‚ùå No changed folders detected. Skipping PR."
            exit 0
          fi

          PR_TITLE="Sync Lambda changes: ${{ env.folders }}"
          PR_BODY="This PR updates the following Lambda functions: **${{ env.folders }}**\n\nüë§ Author: ${{ env.author }}\nüìÖ Date: ${{ env.date }}"

          ASSIGNEE_VALID=$(gh api users/${{ env.author }} --silent || echo "INVALID")

          if [[ "$ASSIGNEE_VALID" == "INVALID" ]]; then
            echo "‚ö†Ô∏è Warning: Assignee '${{ env.author }}' not found. Skipping assignment."
            gh pr create --repo amey-ev/DestinationRepo \
              --head "${{ env.branch_name }}" \
              --base main \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --label "automation"
          else
            gh pr create --repo amey-ev/DestinationRepo \
              --head "${{ env.branch_name }}" \
              --base main \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --assignee "${{ env.author }}" \
              --label "automation"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}